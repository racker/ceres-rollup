spring:
  application:
    name: rollup-unified-metrics

---
spring:
  profiles: test

kafka:
  servers: ${spring.embedded.kafka.brokers}

  topics:
    in: unified.metrics.json
    out-level-1: unified.metrics.json.5m
    out-level-2: unified.metrics.json.20m
    out-level-3: unified.metrics.json.60m
    out-level-4: unified.metrics.json.240m
    out-level-5: unified.metrics.json.1440m

  consumer:
    auto-offset-reset-config: "earliest"

  streams:
    application-id: "rollup" # ${APPLICATION_ID_CONFIG}
    state-dir-config: "/tmp/kafka-streams" # ${STATE_DIR_CONFIG}
    request-timeout-ms: 60000

    aggregation:
      window-size-in-minutes-level-1: 5     # tumbling window size for aggregation
      window-size-in-minutes-level-2: 20
      window-size-in-minutes-level-3: 60
      window-size-in-minutes-level-4: 240
      window-size-in-minutes-level-5: 1440
      late-arrival-in-minutes: 0            # for late arrival of records

logging:
  level:
    log4j.logger.org.apache.kafka.streams.KafkaStreams: DEBUG
    com.rackspacecloud: debug
    org.springframework:
      kafka: debug

---
spring:
  profiles: development

kafka:
  servers: ${TEST_KAFKA_BOOTSTRAP_SERVERS}

  ssl:
    truststore-location: ${TRUSTSTORE_LOCATION}
    truststore-password: ${TRUSTSTORE_PASSWORD}
    keystore-location: ${KEYSTORE_LOCATION}
    keystore-password: ${KEYSTORE_PASSWORD}
    key-password: ${KEY_PASSWORD}
    endpoint-identification-algorithm: ""
  properties:
    security-protocol: SSL

  topics:
    in: unified.metrics.json
    out-level-1: unified.metrics.json.5m
    out-level-2: unified.metrics.json.20m
    out-level-3: unified.metrics.json.60m
    out-level-4: unified.metrics.json.240m
    out-level-5: unified.metrics.json.1440m

  consumer:
    auto-offset-reset-config: "earliest"

  streams:
    application-id: "rollup" # ${APPLICATION_ID_CONFIG}
    state-dir-config: "/tmp/kafka-streams" # ${STATE_DIR_CONFIG}
    request-timeout-ms: 60000

    aggregation:
      window-size-in-minutes-level-1: 5     # tumbling window size for aggregation
      window-size-in-minutes-level-2: 20
      window-size-in-minutes-level-3: 60
      window-size-in-minutes-level-4: 240
      window-size-in-minutes-level-5: 1440
      late-arrival-in-minutes: 4            # for late arrival of records

logging:
  level:
    log4j.logger.org.apache.kafka.streams.KafkaStreams: DEBUG
    com.rackspacecloud: debug
    org.springframework:
      kafka: debug

management:
  endpoints:
    web:
      exposure:
        include: "health,jolokia,metrics"
  metrics:
    tags:
      stack: "dev"
    export:
      influx:
        db: ceres
        uri: http://localhost:8086
        auto-create-db: true

---
spring:
  profiles: production

kafka:
  servers: ${KAFKA_BOOTSTRAP_SERVERS}

  ssl:
    truststore-location: ${TRUSTSTORE_LOCATION}
    truststore-password: ${TRUSTSTORE_PASSWORD}
    keystore-location: ${KEYSTORE_LOCATION}
    keystore-password: ${KEYSTORE_PASSWORD}
    key-password: ${KEY_PASSWORD}
    endpoint-identification-algorithm: ""
  properties:
    security-protocol: SSL

  topics:
    in: unified.metrics.json
    out-level-1: unified.metrics.json.5m
    out-level-2: unified.metrics.json.20m
    out-level-3: unified.metrics.json.60m
    out-level-4: unified.metrics.json.240m
    out-level-5: unified.metrics.json.1440m

  consumer:
    auto-offset-reset-config: "latest"

  streams:
    application-id: "rollup" # ${APPLICATION_ID_CONFIG}
    state-dir-config: "/tmp/kafka-streams" # ${STATE_DIR_CONFIG}
    request-timeout-ms: 60000

    aggregation:
      window-size-in-minutes-level-1: 5     # tumbling window size for aggregation
      window-size-in-minutes-level-2: 20
      window-size-in-minutes-level-3: 60
      window-size-in-minutes-level-4: 240
      window-size-in-minutes-level-5: 1440
      late-arrival-in-minutes: 4            # for late arrival of records

logging:
  level:
    log4j.logger.org.apache.kafka.streams.KafkaStreams: info
    com.rackspacecloud: info
    org.springframework:
      kafka: info

management:
  endpoints:
    web:
      exposure:
        include: "health,jolokia,metrics"
  metrics:
    tags:
      stack: "prod"
      service: "rollup-service"
    export:
      influx:
        db: ceres
        uri: ${INFLUXDB_METRICS_URL}
        auto-create-db: true